---
import XElement from 'astro-xelement'
const {
	type = 'span',
	class: classList = '',
	style: styles = '',
	easing = 'linear',
	duration = 1500,
	fill = 'both',
	gradient = '',
	direction = "normal",
	iterations = 1,
	delay = "0",
	fullNode = "true",
	delayBetween = 0,
	clean = "true",
	retain = "false",
	trigger = "visible",
	animations = ""
} = Astro.props;

const t = {
	duration: parseInt(duration),
	easing: easing,
	fill: fill,
	direction: direction,
	iterations: parseInt(iterations),
	delay: parseInt(delay)
};

let styleSet = styles;
if ('' !== gradient) {
	styleSet = `
		background: linear-gradient(${gradient});
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
	` + styles;
}

const animate = (target, f) => {
	target.isAnimating = true;
	const fx = f
	fx.animateNode(target, {
		animationString: animations, 
		timing: timing,
		split: !JSON.parse(fullNode),
		clean: JSON.parse(clean),
		retain: retain,
		delayBetweenLetters: parseInt(delayBetween)
	});
}
---

<XElement @is={type}
  style={styleSet}
  class={classList}
  define:vars={
    {
		animate,
		fullNode,
		animations,
		timing: t,
		clean: clean,
		retain: retain,
		trigger,
		delayBetween: delayBetween
    }
  }
  
  @visible={(event,store)=> {
			if (true != event.target.isAnimating) {
				if ('' !== animations && trigger.search('visibleonce') < 0 &&  trigger.search('visible') > -1) {
				animate(event.target,new store.Fx());
			}
		}
  }}
  @visible:once={(event,store)=> {
			if (true != event.target.isAnimating) {
				if ('' !== animations && trigger.search('visibleonce') > -1) {
				animate(event.target,new store.Fx());
			}
		}
  }}
  @click={(event, store)=> {
		if (true != event.target.isAnimating) {
			if ('' !== animations && trigger.search('click') > -1) {
				animate(event.target,new store.Fx());
			}
		}
  }}
  @mouseenter={(event, store)=> {
		if (true != event.target.isAnimating) {
			if ('' !== animations && trigger.search('mouseenter') > -1 && trigger.search('mouseleave') < 0) {
				aanimate(event.target,new store.Fx());
			}
		}
  }}
  @mouseleave={(event, store)=> {
		if (true != event.target.isAnimating) {
			if ('' !== animations && trigger.search('mouseleave') > -1 && trigger.search('mouseenter') < 0) {
				animate(event.target,new store.Fx());
			}
		}
  }}
><slot/></XElement>
